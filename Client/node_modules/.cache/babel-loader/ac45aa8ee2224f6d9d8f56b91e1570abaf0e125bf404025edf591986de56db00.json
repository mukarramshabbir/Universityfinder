{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\rbela\\\\Downloads\\\\awais_ (2) (1)\\\\awais_\\\\test\\\\test\\\\src\\\\contexts\\\\QuestionsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsContext = /*#__PURE__*/createContext();\nexport function useQuestions() {\n  _s();\n  return useContext(QuestionsContext);\n}\n_s(useQuestions, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function QuestionsProvider({\n  children\n}) {\n  _s2();\n  const [questions, setQuestions] = useState([]);\n\n  // Load questions from localStorage on initial load\n  useEffect(() => {\n    const savedQuestions = localStorage.getItem(\"questions\");\n    if (savedQuestions) {\n      setQuestions(JSON.parse(savedQuestions));\n    }\n  }, []);\n\n  // Save questions to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem(\"questions\", JSON.stringify(questions));\n  }, [questions]);\n  const addQuestion = question => {\n    const newQuestion = {\n      id: Date.now(),\n      ...question,\n      answers: [],\n      createdAt: new Date().toISOString()\n    };\n    setQuestions(prev => [...prev, newQuestion]);\n  };\n  const addAnswer = (questionId, answer) => {\n    const newAnswer = {\n      id: Date.now(),\n      ...answer,\n      createdAt: new Date().toISOString()\n    };\n    setQuestions(prev => prev.map(question => question.id === questionId ? {\n      ...question,\n      answers: [...question.answers, newAnswer]\n    } : question));\n  };\n  const value = {\n    questions,\n    addQuestion,\n    addAnswer\n  };\n  return /*#__PURE__*/_jsxDEV(QuestionsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s2(QuestionsProvider, \"CvPu+GNRbtHcfrzBd6eT+rQCQhA=\");\n_c = QuestionsProvider;\nvar _c;\n$RefreshReg$(_c, \"QuestionsProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","QuestionsContext","useQuestions","QuestionsProvider","children","questions","setQuestions","savedQuestions","localStorage","getItem","JSON","parse","setItem","stringify","addQuestion","question","newQuestion","id","Date","now","answers","createdAt","toISOString","prev","addAnswer","questionId","answer","newAnswer","map","value","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rbela/Downloads/awais_ (2) (1)/awais_/test/test/src/contexts/QuestionsContext.js"],"sourcesContent":["\"use client\"\r\n\r\nimport { createContext, useContext, useState, useEffect } from \"react\"\r\n\r\nconst QuestionsContext = createContext()\r\n\r\nexport function useQuestions() {\r\n  return useContext(QuestionsContext)\r\n}\r\n\r\nexport function QuestionsProvider({ children }) {\r\n  const [questions, setQuestions] = useState([])\r\n\r\n  // Load questions from localStorage on initial load\r\n  useEffect(() => {\r\n    const savedQuestions = localStorage.getItem(\"questions\")\r\n    if (savedQuestions) {\r\n      setQuestions(JSON.parse(savedQuestions))\r\n    }\r\n  }, [])\r\n\r\n  // Save questions to localStorage whenever they change\r\n  useEffect(() => {\r\n    localStorage.setItem(\"questions\", JSON.stringify(questions))\r\n  }, [questions])\r\n\r\n  const addQuestion = (question) => {\r\n    const newQuestion = {\r\n      id: Date.now(),\r\n      ...question,\r\n      answers: [],\r\n      createdAt: new Date().toISOString()\r\n    }\r\n    setQuestions(prev => [...prev, newQuestion])\r\n  }\r\n\r\n  const addAnswer = (questionId, answer) => {\r\n    const newAnswer = {\r\n      id: Date.now(),\r\n      ...answer,\r\n      createdAt: new Date().toISOString()\r\n    }\r\n    setQuestions(prev => \r\n      prev.map(question => \r\n        question.id === questionId\r\n          ? { ...question, answers: [...question.answers, newAnswer] }\r\n          : question\r\n      )\r\n    )\r\n  }\r\n\r\n  const value = {\r\n    questions,\r\n    addQuestion,\r\n    addAnswer\r\n  }\r\n\r\n  return (\r\n    <QuestionsContext.Provider value={value}>\r\n      {children}\r\n    </QuestionsContext.Provider>\r\n  )\r\n} "],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;EAAAC,GAAA,GAAAD,YAAA;AAEZ,SAASE,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtE,MAAMC,gBAAgB,gBAAGN,aAAa,CAAC,CAAC;AAExC,OAAO,SAASO,YAAYA,CAAA,EAAG;EAAAV,EAAA;EAC7B,OAAOI,UAAU,CAACK,gBAAgB,CAAC;AACrC;AAACT,EAAA,CAFeU,YAAY;AAI5B,OAAO,SAASC,iBAAiBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAV,GAAA;EAC9C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACxD,IAAIF,cAAc,EAAE;MAClBD,YAAY,CAACI,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAT,SAAS,CAAC,MAAM;IACdU,YAAY,CAACI,OAAO,CAAC,WAAW,EAAEF,IAAI,CAACG,SAAS,CAACR,SAAS,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,MAAMS,WAAW,GAAIC,QAAQ,IAAK;IAChC,MAAMC,WAAW,GAAG;MAClBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACd,GAAGJ,QAAQ;MACXK,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;IACpC,CAAC;IACDhB,YAAY,CAACiB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEP,WAAW,CAAC,CAAC;EAC9C,CAAC;EAED,MAAMQ,SAAS,GAAGA,CAACC,UAAU,EAAEC,MAAM,KAAK;IACxC,MAAMC,SAAS,GAAG;MAChBV,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACd,GAAGO,MAAM;MACTL,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;IACpC,CAAC;IACDhB,YAAY,CAACiB,IAAI,IACfA,IAAI,CAACK,GAAG,CAACb,QAAQ,IACfA,QAAQ,CAACE,EAAE,KAAKQ,UAAU,GACtB;MAAE,GAAGV,QAAQ;MAAEK,OAAO,EAAE,CAAC,GAAGL,QAAQ,CAACK,OAAO,EAAEO,SAAS;IAAE,CAAC,GAC1DZ,QACN,CACF,CAAC;EACH,CAAC;EAED,MAAMc,KAAK,GAAG;IACZxB,SAAS;IACTS,WAAW;IACXU;EACF,CAAC;EAED,oBACExB,OAAA,CAACC,gBAAgB,CAAC6B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzB,QAAA,EACrCA;EAAQ;IAAA2B,QAAA,EAAAxC,YAAA;IAAAyC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC;AAACvC,GAAA,CApDeS,iBAAiB;AAAA+B,EAAA,GAAjB/B,iBAAiB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}