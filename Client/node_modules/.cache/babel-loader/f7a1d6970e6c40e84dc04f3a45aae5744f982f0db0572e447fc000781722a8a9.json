{"ast":null,"code":"// Function to fetch and parse the CSV data\nexport async function fetchUniversityData() {\n  try {\n    const response = await fetch(\"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/UK_Universities_02-fGf2vYKdmX1j5yMFO1QSUVuAAuF6mQ.csv\");\n    const csvText = await response.text();\n\n    // Parse CSV\n    const lines = csvText.split(\"\\n\");\n    const headers = lines[0].split(\",\").map(header => header.trim());\n    const universities = [];\n    for (let i = 1; i < lines.length; i++) {\n      if (!lines[i].trim()) continue;\n\n      // Handle commas within quoted fields\n      const row = [];\n      let inQuotes = false;\n      let currentValue = \"\";\n      for (const char of lines[i]) {\n        if (char === '\"') {\n          inQuotes = !inQuotes;\n        } else if (char === \",\" && !inQuotes) {\n          row.push(currentValue.trim());\n          currentValue = \"\";\n        } else {\n          currentValue += char;\n        }\n      }\n      row.push(currentValue.trim());\n\n      // Create university object\n      const university = {};\n      headers.forEach((header, index) => {\n        if (index < row.length) {\n          university[header] = row[index];\n        } else {\n          university[header] = \"\";\n        }\n      });\n\n      // Add a unique ID to each university\n      university.id = i;\n      universities.push(university);\n    }\n    return universities;\n  } catch (error) {\n    console.error(\"Error fetching university data:\", error);\n    return [];\n  }\n}\n\n// Update the recommendUniversities function to handle the new preferences\nexport function recommendUniversities(universities, preferences) {\n  if (!universities || universities.length === 0) {\n    return [];\n  }\n\n  // Calculate match score for each university\n  const scoredUniversities = universities.map(university => {\n    let score = 0;\n    let maxPossibleScore = 0;\n\n    // Location preference - region\n    if (preferences.locationRegion && preferences.locationRegion !== \"Any Region\") {\n      maxPossibleScore += 3;\n      // Simple check if the university location contains the region name\n      if (university.Location.toLowerCase().includes(preferences.locationRegion.toLowerCase())) {\n        score += 3;\n      }\n    }\n\n    // Location preference - specific city\n    if (preferences.location) {\n      maxPossibleScore += 3;\n      if (university.Location.toLowerCase().includes(preferences.location.toLowerCase())) {\n        score += 3;\n      }\n    }\n\n    // Tuition fee preference for undergraduate\n    if (preferences.maxUgTuition && (preferences.studyLevel === \"undergraduate\" || preferences.studyLevel === \"both\")) {\n      maxPossibleScore += 2;\n      const feeText = university.UG_Tuition_Fee;\n      const domesticFeeMatch = feeText.match(/£([\\d,]+)/);\n      if (domesticFeeMatch) {\n        const fee = Number.parseInt(domesticFeeMatch[1].replace(\",\", \"\"));\n        if (fee <= preferences.maxUgTuition) {\n          score += 2;\n        }\n      }\n    }\n\n    // Tuition fee preference for masters\n    if (preferences.maxMastersTuition && (preferences.studyLevel === \"masters\" || preferences.studyLevel === \"both\")) {\n      maxPossibleScore += 2;\n      const feeText = university.Masters_Tuition_Fee;\n      const domesticFeeMatch = feeText.match(/£([\\d,]+)/);\n      if (domesticFeeMatch) {\n        const fee = Number.parseInt(domesticFeeMatch[1].replace(\",\", \"\"));\n        if (fee <= preferences.maxMastersTuition) {\n          score += 2;\n        }\n      }\n    }\n\n    // On-campus accommodation\n    if (preferences.onCampusAccommodation) {\n      maxPossibleScore += 1;\n      if (university.On_Campus_Accommodation === \"Yes\") {\n        score += 1;\n      }\n    }\n\n    // Exchange students acceptance\n    if (preferences.exchangeProgram) {\n      maxPossibleScore += 1;\n      if (university.Exchange_Students_Acceptance === \"Yes\") {\n        score += 1;\n      }\n    }\n\n    // Ranking preference\n    if (preferences.minRanking) {\n      maxPossibleScore += 2;\n      const ranking = Number.parseInt(university.Ranking);\n      if (!isNaN(ranking) && ranking <= preferences.minRanking) {\n        score += 2;\n      }\n    }\n\n    // Research opportunities\n    if (preferences.researchOpportunities) {\n      maxPossibleScore += 1;\n      if (university.Research_Opportunities === \"Yes\") {\n        score += 1;\n      }\n    }\n\n    // Scholarship availability\n    if (preferences.scholarshipNeeded) {\n      maxPossibleScore += 2;\n      if (university.Scholarship_Availability && university.Scholarship_Availability !== \"No\") {\n        score += 2;\n      }\n    }\n\n    // Employment rate\n    if (preferences.minEmploymentRate) {\n      maxPossibleScore += 2;\n      const employmentRate = Number.parseInt(university.Employment_Rate_After_Graduation);\n      if (!isNaN(employmentRate) && employmentRate >= preferences.minEmploymentRate) {\n        score += 2;\n      }\n    }\n\n    // Student to faculty ratio\n    if (preferences.studentFacultyRatio) {\n      maxPossibleScore += 1;\n      const ratio = university.Student_to_Faculty_Ratio;\n      const numericRatio = Number.parseInt(ratio.split(\":\")[0]);\n      if (preferences.studentFacultyRatio === \"low\" && numericRatio <= 15) {\n        score += 1;\n      } else if (preferences.studentFacultyRatio === \"medium\" && numericRatio > 15 && numericRatio <= 25) {\n        score += 1;\n      } else if (preferences.studentFacultyRatio === \"high\" && numericRatio > 25) {\n        score += 1;\n      }\n    }\n\n    // International student population\n    if (preferences.internationalStudentPercentage) {\n      maxPossibleScore += 1;\n      const population = university.International_Student_Population;\n      const percentage = Number.parseInt(population);\n      if (preferences.internationalStudentPercentage === \"low\" && percentage < 15) {\n        score += 1;\n      } else if (preferences.internationalStudentPercentage === \"medium\" && percentage >= 15 && percentage <= 30) {\n        score += 1;\n      } else if (preferences.internationalStudentPercentage === \"high\" && percentage > 30) {\n        score += 1;\n      }\n    }\n\n    // Club interests\n    if (preferences.clubInterests && preferences.clubInterests.length > 0) {\n      maxPossibleScore += 2;\n      let clubScore = 0;\n      const clubsText = university.Clubs_Societies || \"\";\n      preferences.clubInterests.forEach(interest => {\n        if (clubsText.toLowerCase().includes(interest.toLowerCase())) {\n          clubScore += 0.5; // Partial score for each matching interest\n        }\n      });\n\n      // Cap the club score at 2\n      score += Math.min(clubScore, 2);\n    }\n\n    // Calculate percentage match (if no preferences were set, default to 0)\n    const normalizedScore = maxPossibleScore > 0 ? score / maxPossibleScore : 0;\n    return {\n      ...university,\n      score: normalizedScore\n    };\n  });\n\n  // Sort by score (highest first)\n  return scoredUniversities.sort((a, b) => b.score - a.score);\n}","map":{"version":3,"names":["fetchUniversityData","response","fetch","csvText","text","lines","split","headers","map","header","trim","universities","i","length","row","inQuotes","currentValue","char","push","university","forEach","index","id","error","console","recommendUniversities","preferences","scoredUniversities","score","maxPossibleScore","locationRegion","Location","toLowerCase","includes","location","maxUgTuition","studyLevel","feeText","UG_Tuition_Fee","domesticFeeMatch","match","fee","Number","parseInt","replace","maxMastersTuition","Masters_Tuition_Fee","onCampusAccommodation","On_Campus_Accommodation","exchangeProgram","Exchange_Students_Acceptance","minRanking","ranking","Ranking","isNaN","researchOpportunities","Research_Opportunities","scholarshipNeeded","Scholarship_Availability","minEmploymentRate","employmentRate","Employment_Rate_After_Graduation","studentFacultyRatio","ratio","Student_to_Faculty_Ratio","numericRatio","internationalStudentPercentage","population","International_Student_Population","percentage","clubInterests","clubScore","clubsText","Clubs_Societies","interest","Math","min","normalizedScore","sort","a","b"],"sources":["E:/Work/Fiverr/28/Abdi_Fiverr/Awais/W1899505 FYP/W1899505 FYP/W1899505 FYP/test/test/src/services/universityService.js"],"sourcesContent":["// Function to fetch and parse the CSV data\nexport async function fetchUniversityData() {\n  try {\n    const response = await fetch(\n      \"https://hebbkx1anhila5yf.public.blob.vercel-storage.com/UK_Universities_02-fGf2vYKdmX1j5yMFO1QSUVuAAuF6mQ.csv\",\n    )\n    const csvText = await response.text()\n\n    // Parse CSV\n    const lines = csvText.split(\"\\n\")\n    const headers = lines[0].split(\",\").map((header) => header.trim())\n\n    const universities = []\n\n    for (let i = 1; i < lines.length; i++) {\n      if (!lines[i].trim()) continue\n\n      // Handle commas within quoted fields\n      const row = []\n      let inQuotes = false\n      let currentValue = \"\"\n\n      for (const char of lines[i]) {\n        if (char === '\"') {\n          inQuotes = !inQuotes\n        } else if (char === \",\" && !inQuotes) {\n          row.push(currentValue.trim())\n          currentValue = \"\"\n        } else {\n          currentValue += char\n        }\n      }\n\n      row.push(currentValue.trim())\n\n      // Create university object\n      const university = {}\n      headers.forEach((header, index) => {\n        if (index < row.length) {\n          university[header] = row[index]\n        } else {\n          university[header] = \"\"\n        }\n      })\n\n      // Add a unique ID to each university\n      university.id = i\n\n      universities.push(university)\n    }\n\n    return universities\n  } catch (error) {\n    console.error(\"Error fetching university data:\", error)\n    return []\n  }\n}\n\n\n// Update the recommendUniversities function to handle the new preferences\nexport function recommendUniversities(universities, preferences) {\n  if (!universities || universities.length === 0) {\n    return []\n  }\n\n  // Calculate match score for each university\n  const scoredUniversities = universities.map((university) => {\n    let score = 0\n    let maxPossibleScore = 0\n\n    // Location preference - region\n    if (preferences.locationRegion && preferences.locationRegion !== \"Any Region\") {\n      maxPossibleScore += 3\n      // Simple check if the university location contains the region name\n      if (university.Location.toLowerCase().includes(preferences.locationRegion.toLowerCase())) {\n        score += 3\n      }\n    }\n\n    // Location preference - specific city\n    if (preferences.location) {\n      maxPossibleScore += 3\n      if (university.Location.toLowerCase().includes(preferences.location.toLowerCase())) {\n        score += 3\n      }\n    }\n\n    // Tuition fee preference for undergraduate\n    if (preferences.maxUgTuition && (preferences.studyLevel === \"undergraduate\" || preferences.studyLevel === \"both\")) {\n      maxPossibleScore += 2\n      const feeText = university.UG_Tuition_Fee\n      const domesticFeeMatch = feeText.match(/£([\\d,]+)/)\n      if (domesticFeeMatch) {\n        const fee = Number.parseInt(domesticFeeMatch[1].replace(\",\", \"\"))\n        if (fee <= preferences.maxUgTuition) {\n          score += 2\n        }\n      }\n    }\n\n    // Tuition fee preference for masters\n    if (preferences.maxMastersTuition && (preferences.studyLevel === \"masters\" || preferences.studyLevel === \"both\")) {\n      maxPossibleScore += 2\n      const feeText = university.Masters_Tuition_Fee\n      const domesticFeeMatch = feeText.match(/£([\\d,]+)/)\n      if (domesticFeeMatch) {\n        const fee = Number.parseInt(domesticFeeMatch[1].replace(\",\", \"\"))\n        if (fee <= preferences.maxMastersTuition) {\n          score += 2\n        }\n      }\n    }\n\n    // On-campus accommodation\n    if (preferences.onCampusAccommodation) {\n      maxPossibleScore += 1\n      if (university.On_Campus_Accommodation === \"Yes\") {\n        score += 1\n      }\n    }\n\n    // Exchange students acceptance\n    if (preferences.exchangeProgram) {\n      maxPossibleScore += 1\n      if (university.Exchange_Students_Acceptance === \"Yes\") {\n        score += 1\n      }\n    }\n\n    // Ranking preference\n    if (preferences.minRanking) {\n      maxPossibleScore += 2\n      const ranking = Number.parseInt(university.Ranking)\n      if (!isNaN(ranking) && ranking <= preferences.minRanking) {\n        score += 2\n      }\n    }\n\n    // Research opportunities\n    if (preferences.researchOpportunities) {\n      maxPossibleScore += 1\n      if (university.Research_Opportunities === \"Yes\") {\n        score += 1\n      }\n    }\n\n    // Scholarship availability\n    if (preferences.scholarshipNeeded) {\n      maxPossibleScore += 2\n      if (university.Scholarship_Availability && university.Scholarship_Availability !== \"No\") {\n        score += 2\n      }\n    }\n\n    // Employment rate\n    if (preferences.minEmploymentRate) {\n      maxPossibleScore += 2\n      const employmentRate = Number.parseInt(university.Employment_Rate_After_Graduation)\n      if (!isNaN(employmentRate) && employmentRate >= preferences.minEmploymentRate) {\n        score += 2\n      }\n    }\n\n    // Student to faculty ratio\n    if (preferences.studentFacultyRatio) {\n      maxPossibleScore += 1\n      const ratio = university.Student_to_Faculty_Ratio\n      const numericRatio = Number.parseInt(ratio.split(\":\")[0])\n\n      if (preferences.studentFacultyRatio === \"low\" && numericRatio <= 15) {\n        score += 1\n      } else if (preferences.studentFacultyRatio === \"medium\" && numericRatio > 15 && numericRatio <= 25) {\n        score += 1\n      } else if (preferences.studentFacultyRatio === \"high\" && numericRatio > 25) {\n        score += 1\n      }\n    }\n\n    // International student population\n    if (preferences.internationalStudentPercentage) {\n      maxPossibleScore += 1\n      const population = university.International_Student_Population\n      const percentage = Number.parseInt(population)\n\n      if (preferences.internationalStudentPercentage === \"low\" && percentage < 15) {\n        score += 1\n      } else if (preferences.internationalStudentPercentage === \"medium\" && percentage >= 15 && percentage <= 30) {\n        score += 1\n      } else if (preferences.internationalStudentPercentage === \"high\" && percentage > 30) {\n        score += 1\n      }\n    }\n\n    // Club interests\n    if (preferences.clubInterests && preferences.clubInterests.length > 0) {\n      maxPossibleScore += 2\n      let clubScore = 0\n      const clubsText = university.Clubs_Societies || \"\"\n\n      preferences.clubInterests.forEach((interest) => {\n        if (clubsText.toLowerCase().includes(interest.toLowerCase())) {\n          clubScore += 0.5 // Partial score for each matching interest\n        }\n      })\n\n      // Cap the club score at 2\n      score += Math.min(clubScore, 2)\n    }\n\n    // Calculate percentage match (if no preferences were set, default to 0)\n    const normalizedScore = maxPossibleScore > 0 ? score / maxPossibleScore : 0\n\n    return {\n      ...university,\n      score: normalizedScore,\n    }\n  })\n\n  // Sort by score (highest first)\n  return scoredUniversities.sort((a, b) => b.score - a.score)\n}\n"],"mappings":"AAAA;AACA,OAAO,eAAeA,mBAAmBA,CAAA,EAAG;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,+GACF,CAAC;IACD,MAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAErC;IACA,MAAMC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,IAAI,CAAC;IACjC,MAAMC,OAAO,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACE,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,CAAC,CAAC,CAAC;IAElE,MAAMC,YAAY,GAAG,EAAE;IAEvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAI,CAACP,KAAK,CAACO,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,EAAE;;MAEtB;MACA,MAAMI,GAAG,GAAG,EAAE;MACd,IAAIC,QAAQ,GAAG,KAAK;MACpB,IAAIC,YAAY,GAAG,EAAE;MAErB,KAAK,MAAMC,IAAI,IAAIZ,KAAK,CAACO,CAAC,CAAC,EAAE;QAC3B,IAAIK,IAAI,KAAK,GAAG,EAAE;UAChBF,QAAQ,GAAG,CAACA,QAAQ;QACtB,CAAC,MAAM,IAAIE,IAAI,KAAK,GAAG,IAAI,CAACF,QAAQ,EAAE;UACpCD,GAAG,CAACI,IAAI,CAACF,YAAY,CAACN,IAAI,CAAC,CAAC,CAAC;UAC7BM,YAAY,GAAG,EAAE;QACnB,CAAC,MAAM;UACLA,YAAY,IAAIC,IAAI;QACtB;MACF;MAEAH,GAAG,CAACI,IAAI,CAACF,YAAY,CAACN,IAAI,CAAC,CAAC,CAAC;;MAE7B;MACA,MAAMS,UAAU,GAAG,CAAC,CAAC;MACrBZ,OAAO,CAACa,OAAO,CAAC,CAACX,MAAM,EAAEY,KAAK,KAAK;QACjC,IAAIA,KAAK,GAAGP,GAAG,CAACD,MAAM,EAAE;UACtBM,UAAU,CAACV,MAAM,CAAC,GAAGK,GAAG,CAACO,KAAK,CAAC;QACjC,CAAC,MAAM;UACLF,UAAU,CAACV,MAAM,CAAC,GAAG,EAAE;QACzB;MACF,CAAC,CAAC;;MAEF;MACAU,UAAU,CAACG,EAAE,GAAGV,CAAC;MAEjBD,YAAY,CAACO,IAAI,CAACC,UAAU,CAAC;IAC/B;IAEA,OAAOR,YAAY;EACrB,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,EAAE;EACX;AACF;;AAGA;AACA,OAAO,SAASE,qBAAqBA,CAACd,YAAY,EAAEe,WAAW,EAAE;EAC/D,IAAI,CAACf,YAAY,IAAIA,YAAY,CAACE,MAAM,KAAK,CAAC,EAAE;IAC9C,OAAO,EAAE;EACX;;EAEA;EACA,MAAMc,kBAAkB,GAAGhB,YAAY,CAACH,GAAG,CAAEW,UAAU,IAAK;IAC1D,IAAIS,KAAK,GAAG,CAAC;IACb,IAAIC,gBAAgB,GAAG,CAAC;;IAExB;IACA,IAAIH,WAAW,CAACI,cAAc,IAAIJ,WAAW,CAACI,cAAc,KAAK,YAAY,EAAE;MAC7ED,gBAAgB,IAAI,CAAC;MACrB;MACA,IAAIV,UAAU,CAACY,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,WAAW,CAACI,cAAc,CAACE,WAAW,CAAC,CAAC,CAAC,EAAE;QACxFJ,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAACQ,QAAQ,EAAE;MACxBL,gBAAgB,IAAI,CAAC;MACrB,IAAIV,UAAU,CAACY,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,WAAW,CAACQ,QAAQ,CAACF,WAAW,CAAC,CAAC,CAAC,EAAE;QAClFJ,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAACS,YAAY,KAAKT,WAAW,CAACU,UAAU,KAAK,eAAe,IAAIV,WAAW,CAACU,UAAU,KAAK,MAAM,CAAC,EAAE;MACjHP,gBAAgB,IAAI,CAAC;MACrB,MAAMQ,OAAO,GAAGlB,UAAU,CAACmB,cAAc;MACzC,MAAMC,gBAAgB,GAAGF,OAAO,CAACG,KAAK,CAAC,WAAW,CAAC;MACnD,IAAID,gBAAgB,EAAE;QACpB,MAAME,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACJ,gBAAgB,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACjE,IAAIH,GAAG,IAAIf,WAAW,CAACS,YAAY,EAAE;UACnCP,KAAK,IAAI,CAAC;QACZ;MACF;IACF;;IAEA;IACA,IAAIF,WAAW,CAACmB,iBAAiB,KAAKnB,WAAW,CAACU,UAAU,KAAK,SAAS,IAAIV,WAAW,CAACU,UAAU,KAAK,MAAM,CAAC,EAAE;MAChHP,gBAAgB,IAAI,CAAC;MACrB,MAAMQ,OAAO,GAAGlB,UAAU,CAAC2B,mBAAmB;MAC9C,MAAMP,gBAAgB,GAAGF,OAAO,CAACG,KAAK,CAAC,WAAW,CAAC;MACnD,IAAID,gBAAgB,EAAE;QACpB,MAAME,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAACJ,gBAAgB,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACjE,IAAIH,GAAG,IAAIf,WAAW,CAACmB,iBAAiB,EAAE;UACxCjB,KAAK,IAAI,CAAC;QACZ;MACF;IACF;;IAEA;IACA,IAAIF,WAAW,CAACqB,qBAAqB,EAAE;MACrClB,gBAAgB,IAAI,CAAC;MACrB,IAAIV,UAAU,CAAC6B,uBAAuB,KAAK,KAAK,EAAE;QAChDpB,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAACuB,eAAe,EAAE;MAC/BpB,gBAAgB,IAAI,CAAC;MACrB,IAAIV,UAAU,CAAC+B,4BAA4B,KAAK,KAAK,EAAE;QACrDtB,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAACyB,UAAU,EAAE;MAC1BtB,gBAAgB,IAAI,CAAC;MACrB,MAAMuB,OAAO,GAAGV,MAAM,CAACC,QAAQ,CAACxB,UAAU,CAACkC,OAAO,CAAC;MACnD,IAAI,CAACC,KAAK,CAACF,OAAO,CAAC,IAAIA,OAAO,IAAI1B,WAAW,CAACyB,UAAU,EAAE;QACxDvB,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAAC6B,qBAAqB,EAAE;MACrC1B,gBAAgB,IAAI,CAAC;MACrB,IAAIV,UAAU,CAACqC,sBAAsB,KAAK,KAAK,EAAE;QAC/C5B,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAAC+B,iBAAiB,EAAE;MACjC5B,gBAAgB,IAAI,CAAC;MACrB,IAAIV,UAAU,CAACuC,wBAAwB,IAAIvC,UAAU,CAACuC,wBAAwB,KAAK,IAAI,EAAE;QACvF9B,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAACiC,iBAAiB,EAAE;MACjC9B,gBAAgB,IAAI,CAAC;MACrB,MAAM+B,cAAc,GAAGlB,MAAM,CAACC,QAAQ,CAACxB,UAAU,CAAC0C,gCAAgC,CAAC;MACnF,IAAI,CAACP,KAAK,CAACM,cAAc,CAAC,IAAIA,cAAc,IAAIlC,WAAW,CAACiC,iBAAiB,EAAE;QAC7E/B,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAACoC,mBAAmB,EAAE;MACnCjC,gBAAgB,IAAI,CAAC;MACrB,MAAMkC,KAAK,GAAG5C,UAAU,CAAC6C,wBAAwB;MACjD,MAAMC,YAAY,GAAGvB,MAAM,CAACC,QAAQ,CAACoB,KAAK,CAACzD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAEzD,IAAIoB,WAAW,CAACoC,mBAAmB,KAAK,KAAK,IAAIG,YAAY,IAAI,EAAE,EAAE;QACnErC,KAAK,IAAI,CAAC;MACZ,CAAC,MAAM,IAAIF,WAAW,CAACoC,mBAAmB,KAAK,QAAQ,IAAIG,YAAY,GAAG,EAAE,IAAIA,YAAY,IAAI,EAAE,EAAE;QAClGrC,KAAK,IAAI,CAAC;MACZ,CAAC,MAAM,IAAIF,WAAW,CAACoC,mBAAmB,KAAK,MAAM,IAAIG,YAAY,GAAG,EAAE,EAAE;QAC1ErC,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAACwC,8BAA8B,EAAE;MAC9CrC,gBAAgB,IAAI,CAAC;MACrB,MAAMsC,UAAU,GAAGhD,UAAU,CAACiD,gCAAgC;MAC9D,MAAMC,UAAU,GAAG3B,MAAM,CAACC,QAAQ,CAACwB,UAAU,CAAC;MAE9C,IAAIzC,WAAW,CAACwC,8BAA8B,KAAK,KAAK,IAAIG,UAAU,GAAG,EAAE,EAAE;QAC3EzC,KAAK,IAAI,CAAC;MACZ,CAAC,MAAM,IAAIF,WAAW,CAACwC,8BAA8B,KAAK,QAAQ,IAAIG,UAAU,IAAI,EAAE,IAAIA,UAAU,IAAI,EAAE,EAAE;QAC1GzC,KAAK,IAAI,CAAC;MACZ,CAAC,MAAM,IAAIF,WAAW,CAACwC,8BAA8B,KAAK,MAAM,IAAIG,UAAU,GAAG,EAAE,EAAE;QACnFzC,KAAK,IAAI,CAAC;MACZ;IACF;;IAEA;IACA,IAAIF,WAAW,CAAC4C,aAAa,IAAI5C,WAAW,CAAC4C,aAAa,CAACzD,MAAM,GAAG,CAAC,EAAE;MACrEgB,gBAAgB,IAAI,CAAC;MACrB,IAAI0C,SAAS,GAAG,CAAC;MACjB,MAAMC,SAAS,GAAGrD,UAAU,CAACsD,eAAe,IAAI,EAAE;MAElD/C,WAAW,CAAC4C,aAAa,CAAClD,OAAO,CAAEsD,QAAQ,IAAK;QAC9C,IAAIF,SAAS,CAACxC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACyC,QAAQ,CAAC1C,WAAW,CAAC,CAAC,CAAC,EAAE;UAC5DuC,SAAS,IAAI,GAAG,EAAC;QACnB;MACF,CAAC,CAAC;;MAEF;MACA3C,KAAK,IAAI+C,IAAI,CAACC,GAAG,CAACL,SAAS,EAAE,CAAC,CAAC;IACjC;;IAEA;IACA,MAAMM,eAAe,GAAGhD,gBAAgB,GAAG,CAAC,GAAGD,KAAK,GAAGC,gBAAgB,GAAG,CAAC;IAE3E,OAAO;MACL,GAAGV,UAAU;MACbS,KAAK,EAAEiD;IACT,CAAC;EACH,CAAC,CAAC;;EAEF;EACA,OAAOlD,kBAAkB,CAACmD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACpD,KAAK,GAAGmD,CAAC,CAACnD,KAAK,CAAC;AAC7D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}