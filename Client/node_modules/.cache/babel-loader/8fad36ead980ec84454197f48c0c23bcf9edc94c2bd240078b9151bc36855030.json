{"ast":null,"code":"export async function fetchUniversityData() {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/universities\"); // Update this if using a different backend URL\n    const data = await response.json();\n    return data.universities || []; // Assuming your backend returns `{ universities: [...] }`\n  } catch (error) {\n    console.error(\"Error fetching university data from MongoDB:\", error);\n    return [];\n  }\n}\n\n// Update the recommendUniversities function to handle the new preferences\nexport function recommendUniversities(universities, preferences) {\n  if (!universities || universities.length === 0) {\n    return [];\n  }\n\n  // Calculate match score for each university\n  const scoredUniversities = universities.map(university => {\n    let score = 0;\n    let maxPossibleScore = 0;\n\n    // Location preference - region\n    if (preferences.locationRegion && preferences.locationRegion !== \"Any Region\") {\n      maxPossibleScore += 3;\n      // Simple check if the university location contains the region name\n      if (university.Location.toLowerCase().includes(preferences.locationRegion.toLowerCase())) {\n        score += 3;\n      }\n    }\n\n    // Location preference - specific city\n    if (preferences.location) {\n      maxPossibleScore += 3;\n      if (university.Location.toLowerCase().includes(preferences.location.toLowerCase())) {\n        score += 3;\n      }\n    }\n\n    // Tuition fee preference for undergraduate\n    if (preferences.maxUgTuition && (preferences.studyLevel === \"undergraduate\" || preferences.studyLevel === \"both\")) {\n      maxPossibleScore += 2;\n      const feeText = university[\"Tuition Fees (UG)\"];\n      const domesticFeeMatch = feeText.match(/£([\\d,]+)/);\n      if (domesticFeeMatch) {\n        const fee = Number.parseInt(domesticFeeMatch[1].replace(\",\", \"\"));\n        if (fee <= preferences.maxUgTuition) {\n          score += 2;\n        }\n      }\n    }\n\n    // Tuition fee preference for masters\n    if (preferences.maxMastersTuition && (preferences.studyLevel === \"masters\" || preferences.studyLevel === \"both\")) {\n      maxPossibleScore += 2;\n      const feeText = university[\"Tuition Fees (PG)\"];\n      const domesticFeeMatch = feeText.match(/£([\\d,]+)/);\n      if (domesticFeeMatch) {\n        const fee = Number.parseInt(domesticFeeMatch[1].replace(\",\", \"\"));\n        if (fee <= preferences.maxMastersTuition) {\n          score += 2;\n        }\n      }\n    }\n\n    // On-campus accommodation\n    if (preferences.onCampusAccommodation) {\n      maxPossibleScore += 1;\n      if (university.On_Campus_Accommodation === \"Yes\") {\n        score += 1;\n      }\n    }\n\n    // Exchange students acceptance\n    if (preferences.exchangeProgram) {\n      maxPossibleScore += 1;\n      if (university.Exchange_Students_Acceptance === \"Yes\") {\n        score += 1;\n      }\n    }\n\n    // Ranking preference\n    if (preferences.minRanking) {\n      maxPossibleScore += 2;\n      const ranking = Number.parseInt(university.Ranking);\n      if (!isNaN(ranking) && ranking <= preferences.minRanking) {\n        score += 2;\n      }\n    }\n\n    // Research opportunities\n    if (preferences.researchOpportunities) {\n      var _university$Research;\n      maxPossibleScore += 1;\n      if (((_university$Research = university[\"Research Opportunities\"]) === null || _university$Research === void 0 ? void 0 : _university$Research.toLowerCase()) === \"yes\") {\n        score += 1;\n      }\n    }\n\n    // Scholarship availability\n    if (preferences.scholarshipNeeded) {\n      maxPossibleScore += 2;\n      if (university[\"Scholarships Available\"] && university[\"Scholarships Available\"].toLowerCase() !== \"no\") {\n        score += 2;\n      }\n    }\n\n    // Employment rate\n    if (preferences.minEmploymentRate) {\n      maxPossibleScore += 2;\n      const employmentRate = Number.parseInt(university.Employment_Rate_After_Graduation);\n      if (!isNaN(employmentRate) && employmentRate >= preferences.minEmploymentRate) {\n        score += 2;\n      }\n    }\n\n    // Student to faculty ratio\n    if (preferences.studentFacultyRatio) {\n      maxPossibleScore += 1;\n      const ratio = university.Student_to_Faculty_Ratio;\n      const numericRatio = Number.parseInt(ratio.split(\":\")[0]);\n      if (preferences.studentFacultyRatio === \"low\" && numericRatio <= 15) {\n        score += 1;\n      } else if (preferences.studentFacultyRatio === \"medium\" && numericRatio > 15 && numericRatio <= 25) {\n        score += 1;\n      } else if (preferences.studentFacultyRatio === \"high\" && numericRatio > 25) {\n        score += 1;\n      }\n    }\n\n    // International student population\n    if (preferences.internationalStudentPercentage) {\n      maxPossibleScore += 1;\n      const population = university.International_Student_Population;\n      const percentage = Number.parseInt(population);\n      if (preferences.internationalStudentPercentage === \"low\" && percentage < 15) {\n        score += 1;\n      } else if (preferences.internationalStudentPercentage === \"medium\" && percentage >= 15 && percentage <= 30) {\n        score += 1;\n      } else if (preferences.internationalStudentPercentage === \"high\" && percentage > 30) {\n        score += 1;\n      }\n    }\n\n    // Club interests\n    if (preferences.clubInterests && preferences.clubInterests.length > 0) {\n      maxPossibleScore += 2;\n      let clubScore = 0;\n      const clubsText = university.Clubs_Societies || \"\";\n      preferences.clubInterests.forEach(interest => {\n        if (clubsText.toLowerCase().includes(interest.toLowerCase())) {\n          clubScore += 0.5; // Partial score for each matching interest\n        }\n      });\n\n      // Cap the club score at 2\n      score += Math.min(clubScore, 2);\n    }\n\n    // Calculate percentage match (if no preferences were set, default to 0)\n    const normalizedScore = maxPossibleScore > 0 ? score / maxPossibleScore : 0;\n    return {\n      ...university,\n      score: normalizedScore\n    };\n  });\n\n  // Sort by score (highest first)\n  return scoredUniversities.sort((a, b) => b.score - a.score);\n}","map":{"version":3,"names":["fetchUniversityData","response","fetch","data","json","universities","error","console","recommendUniversities","preferences","length","scoredUniversities","map","university","score","maxPossibleScore","locationRegion","Location","toLowerCase","includes","location","maxUgTuition","studyLevel","feeText","domesticFeeMatch","match","fee","Number","parseInt","replace","maxMastersTuition","onCampusAccommodation","On_Campus_Accommodation","exchangeProgram","Exchange_Students_Acceptance","minRanking","ranking","Ranking","isNaN","researchOpportunities","_university$Research","scholarshipNeeded","minEmploymentRate","employmentRate","Employment_Rate_After_Graduation","studentFacultyRatio","ratio","Student_to_Faculty_Ratio","numericRatio","split","internationalStudentPercentage","population","International_Student_Population","percentage","clubInterests","clubScore","clubsText","Clubs_Societies","forEach","interest","Math","min","normalizedScore","sort","a","b"],"sources":["E:/Work/Fiverr/28/Abdi_Fiverr/Awais/W1899505 FYP/W1899505 FYP/W1899505 FYP/test/test/src/services/universityService.js"],"sourcesContent":["export async function fetchUniversityData() {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/universities\"); // Update this if using a different backend URL\n    const data = await response.json();\n    return data.universities || []; // Assuming your backend returns `{ universities: [...] }`\n  } catch (error) {\n    console.error(\"Error fetching university data from MongoDB:\", error);\n    return [];\n  }\n}\n\n\n// Update the recommendUniversities function to handle the new preferences\nexport function recommendUniversities(universities, preferences) {\n  if (!universities || universities.length === 0) {\n    return []\n  }\n\n  // Calculate match score for each university\n  const scoredUniversities = universities.map((university) => {\n    let score = 0\n    let maxPossibleScore = 0\n\n    // Location preference - region\n    if (preferences.locationRegion && preferences.locationRegion !== \"Any Region\") {\n      maxPossibleScore += 3\n      // Simple check if the university location contains the region name\n      if (university.Location.toLowerCase().includes(preferences.locationRegion.toLowerCase())) {\n        score += 3\n      }\n    }\n\n    // Location preference - specific city\n    if (preferences.location) {\n      maxPossibleScore += 3\n      if (university.Location.toLowerCase().includes(preferences.location.toLowerCase())) {\n        score += 3\n      }\n    }\n\n    // Tuition fee preference for undergraduate\n    if (preferences.maxUgTuition && (preferences.studyLevel === \"undergraduate\" || preferences.studyLevel === \"both\")) {\n      maxPossibleScore += 2\n      const feeText = university[\"Tuition Fees (UG)\"];\n      const domesticFeeMatch = feeText.match(/£([\\d,]+)/)\n      if (domesticFeeMatch) {\n        const fee = Number.parseInt(domesticFeeMatch[1].replace(\",\", \"\"))\n        if (fee <= preferences.maxUgTuition) {\n          score += 2\n        }\n      }\n    }\n\n    // Tuition fee preference for masters\n    if (preferences.maxMastersTuition && (preferences.studyLevel === \"masters\" || preferences.studyLevel === \"both\")) {\n      maxPossibleScore += 2\n      const feeText = university[\"Tuition Fees (PG)\"];\n      const domesticFeeMatch = feeText.match(/£([\\d,]+)/)\n      if (domesticFeeMatch) {\n        const fee = Number.parseInt(domesticFeeMatch[1].replace(\",\", \"\"))\n        if (fee <= preferences.maxMastersTuition) {\n          score += 2\n        }\n      }\n    }\n\n    // On-campus accommodation\n    if (preferences.onCampusAccommodation) {\n      maxPossibleScore += 1\n      if (university.On_Campus_Accommodation === \"Yes\") {\n        score += 1\n      }\n    }\n\n    // Exchange students acceptance\n    if (preferences.exchangeProgram) {\n      maxPossibleScore += 1\n      if (university.Exchange_Students_Acceptance === \"Yes\") {\n        score += 1\n      }\n    }\n\n    // Ranking preference\n    if (preferences.minRanking) {\n      maxPossibleScore += 2\n      const ranking = Number.parseInt(university.Ranking)\n      if (!isNaN(ranking) && ranking <= preferences.minRanking) {\n        score += 2\n      }\n    }\n\n    // Research opportunities\n    if (preferences.researchOpportunities) {\n      maxPossibleScore += 1\n      if (university[\"Research Opportunities\"]?.toLowerCase() === \"yes\") {\n        score += 1\n      }\n    }\n\n    // Scholarship availability\n    if (preferences.scholarshipNeeded) {\n      maxPossibleScore += 2\n      if (university[\"Scholarships Available\"] && university[\"Scholarships Available\"].toLowerCase() !== \"no\") {\n        score += 2\n      }\n    }\n\n    // Employment rate\n    if (preferences.minEmploymentRate) {\n      maxPossibleScore += 2\n      const employmentRate = Number.parseInt(university.Employment_Rate_After_Graduation)\n      if (!isNaN(employmentRate) && employmentRate >= preferences.minEmploymentRate) {\n        score += 2\n      }\n    }\n\n    // Student to faculty ratio\n    if (preferences.studentFacultyRatio) {\n      maxPossibleScore += 1\n      const ratio = university.Student_to_Faculty_Ratio\n      const numericRatio = Number.parseInt(ratio.split(\":\")[0])\n\n      if (preferences.studentFacultyRatio === \"low\" && numericRatio <= 15) {\n        score += 1\n      } else if (preferences.studentFacultyRatio === \"medium\" && numericRatio > 15 && numericRatio <= 25) {\n        score += 1\n      } else if (preferences.studentFacultyRatio === \"high\" && numericRatio > 25) {\n        score += 1\n      }\n    }\n\n    // International student population\n    if (preferences.internationalStudentPercentage) {\n      maxPossibleScore += 1\n      const population = university.International_Student_Population\n      const percentage = Number.parseInt(population)\n\n      if (preferences.internationalStudentPercentage === \"low\" && percentage < 15) {\n        score += 1\n      } else if (preferences.internationalStudentPercentage === \"medium\" && percentage >= 15 && percentage <= 30) {\n        score += 1\n      } else if (preferences.internationalStudentPercentage === \"high\" && percentage > 30) {\n        score += 1\n      }\n    }\n\n    // Club interests\n    if (preferences.clubInterests && preferences.clubInterests.length > 0) {\n      maxPossibleScore += 2\n      let clubScore = 0\n      const clubsText = university.Clubs_Societies || \"\"\n\n      preferences.clubInterests.forEach((interest) => {\n        if (clubsText.toLowerCase().includes(interest.toLowerCase())) {\n          clubScore += 0.5 // Partial score for each matching interest\n        }\n      })\n\n      // Cap the club score at 2\n      score += Math.min(clubScore, 2)\n    }\n\n    // Calculate percentage match (if no preferences were set, default to 0)\n    const normalizedScore = maxPossibleScore > 0 ? score / maxPossibleScore : 0\n\n    return {\n      ...university,\n      score: normalizedScore,\n    }\n  })\n\n  // Sort by score (highest first)\n  return scoredUniversities.sort((a, b) => b.score - a.score)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}